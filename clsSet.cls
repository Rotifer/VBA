VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "clsSet"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Option Explicit

Private dictSet As Dictionary
Private m_inputRng As Range
'Constructor: Initialize an empty dictionary
Private Sub Class_Initialize()
    Set dictSet = New Dictionary
End Sub
Public Property Let InputRng(rng As Range)
    Set m_inputRng = rng
End Property

' Process the input range by generating an array where each array element is tab-separated string of
'  the cell values for one row of the input range.
Public Function rngValuesArray() As String()
    Dim row_ As Range
    Dim col As Range
    Dim cellValue As Variant
    Dim rngValues() As String
    Dim rowValues() As String
    Dim arrRowIdx As Integer: arrRowIdx = 0
    Dim arrRngIdx As Integer: arrRngIdx = 0
    For Each row_ In m_inputRng.Rows
        For Each col In row_.Columns
            cellValue = col.Value
            ReDim Preserve rowValues(arrRowIdx)
            rowValues(arrRowIdx) = cellValue
            arrRowIdx = arrRowIdx + 1
        Next col
        arrRowIdx = 0
        ReDim Preserve rngValues(arrRngIdx)
        rngValues(arrRngIdx) = Join(rowValues, vbTab)
        arrRngIdx = arrRngIdx + 1
    Next row_
    rngValuesArray = rngValues
End Function
' Create a set (dictionary keys) for the array generated by "rngValuesArray"
Public Property Get rowsAsSet() As Dictionary
    Dim idx As Integer
    Dim rowValue As String
    Dim valuesArray() As String: valuesArray = Me.rngValuesArray
    For idx = 0 To UBound(Me.rngValuesArray)
        rowValue = valuesArray(idx)
        If Not dictSet.Exists(rowValue) Then
            dictSet.Add key:=rowValue, Item:=1
        End If
    Next idx
    Set rowsAsSet = dictSet
End Property


'function isSuperset(set, subset) {
'  for (const elem of subset) {
'    if (!set.has(elem)) {
'      return false;
'    }
'  }
'  return true;
'}

Public Function IsSuperset(otherSet As clsSet) As Boolean
    Dim otherSetValues As Dictionary: Set otherSetValues = otherSet.rowsAsSet
    Dim thisSetValues As Dictionary: Set thisSetValues = Me.rowsAsSet
    Dim element As Variant
    For Each element In otherSetValues.Keys
        If Not thisSetValues.Exists(element) Then
            IsSuperset = False
            Exit Function
        End If
    Next element
    IsSuperset = True
End Function

' Make a full copy of the dictionary (clone it). This is important to avoid
'  unintended data mutations.
Private Function CopyDict(ByVal dict As Dictionary) As Dictionary
    Dim ky As Variant
    Dim dictCopy As Dictionary: Set dictCopy = New Dictionary
    For Each ky In dict.Keys()
        dictCopy.Add key:=ky, Item:=dict(ky)
    Next ky
    Set CopyDict = dictCopy
End Function

Public Function UNION(otherSet As clsSet) As Dictionary
    Dim otherSetValues As Dictionary: Set otherSetValues = CopyDict(otherSet.rowsAsSet)
    Dim thisSetValues As Dictionary: Set thisSetValues = CopyDict(Me.rowsAsSet)
    Dim element As Variant
    For Each element In otherSetValues.Keys
        If Not thisSetValues.Exists(element) Then
            thisSetValues.Add key:=element, Item:=1
        End If
    Next element
    Set UNION = thisSetValues
End Function

Public Function Intersection(otherSet As clsSet) As Dictionary
    Dim otherSetValues As Dictionary: Set otherSetValues = otherSet.rowsAsSet
    Dim thisSetValues As Dictionary: Set thisSetValues = Me.rowsAsSet
    Dim intersection_ As Dictionary: Set intersection_ = New Dictionary
    Dim element As Variant
    For Each element In otherSetValues.Keys
        If thisSetValues.Exists(element) Then
            intersection_.Add key:=element, Item:=1
        End If
    Next element
    Set Intersection = intersection_
End Function

Public Function Difference(otherSet As clsSet) As Dictionary
    Dim difference_ As Dictionary: Set difference_ = New Dictionary
    Dim thisSetDict As Dictionary: Set thisSetDict = CopyDict(Me.rowsAsSet)
    Dim otherSetDict As Dictionary: Set otherSetDict = CopyDict(otherSet.rowsAsSet)
    Dim element As Variant
    For Each element In otherSetDict.Keys
        If thisSetDict.Exists(element) Then
            thisSetDict.Remove element
        End If
    Next element
    Set Difference = thisSetDict
End Function
